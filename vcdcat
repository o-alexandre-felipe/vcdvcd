#!/usr/bin/env python

from __future__ import print_function

from argparse import ArgumentParser, RawTextHelpFormatter
import re
import sys

import vcdvcd
from vcdvcd import VCDVCD

if __name__ == '__main__':
    parser = ArgumentParser(
        description='Print Verilog value change dump (VCD) files in tabular form.',
        epilog="""
# Examples

Show all signals and values:

    vcdcat a.vcd

Will be too large for any non-trivial design.

Get the list of all signals:

    vcdcat -l a.vcd

Show only selected signals:

    vcdcat -x a.vcd top.module.signal1 top.module.signal2

This would show both:

    top.module.signal1
    top.module.signal2

An equivalent command
    vcdcat -x a.vcd 'top.module.signal{1,2}'
    
A broader class of signals is matched using a wildcard '*'
    vcdcat -x a.vcd 'top.module.signal*'

This would not include top.module.signal3 or top.module.signal_x

An even broader class of signals is matched using a double wildcard '**'
that matches signals in the submodules as well


List all signals that starts with the substring "top.":

    vcdcat -l a.vcd 'top.**'


Now get the values for signals:

    vcdcat a.vcd 'top.**'
""".format(
        f=sys.argv[0]),
        formatter_class=RawTextHelpFormatter,
    )
    parser.add_argument(
        '-d',
        '--deltas',
        action='store_true',
        default=False,
        help='https://github.com/cirosantilli/vcdvcd#vcdcat-deltas',
    )
    parser.add_argument(
        '-l',
        '--list',
        action='store_true',
        default=False,
        help='list signal names and quit',
    )
    parser.add_argument(
        'vcd_path',
        metavar='vcd-path'
    )
    parser.add_argument(
        'signals',
        help='only print values for these signals. Substrings of the signal are considered a match by default.',
        metavar='signals',
        nargs='*'
    )
    args = parser.parse_args()
    if args.list:
        vcd = VCDVCD(args.vcd_path, signals=args.signals, only_sigs=True)
        print('\n'.join(vcd.signals))
    else:
        if args.deltas:
            callbacks = vcdvcd.PrintDeltasStreamParserCallbacks()
        else:
            callbacks = vcdvcd.PrintDumpsStreamParserCallbacks()
        VCDVCD(
            args.vcd_path,
            signals=args.signals if args.signals else None,
            store_tvs=False,
            callbacks=callbacks,
        )
